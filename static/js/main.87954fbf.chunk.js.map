{"version":3,"sources":["firebase.js","Product.js","Cart.js","Header.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Product","name","this","props","productInfo","price","type","url","addToCart","className","src","alt","onClick","removeFromCart","Component","Cart","handleClick","event","preventDefault","slideOutDisplay","state","cartSlideOut","setState","key","data","cart","cartPath","userInfo","uid","userPath","cartRef","database","ref","userRef","child","remove","console","log","on","snapshot","val","numOfProducts","set","total","href","cartList","length","map","product","i","isNaN","Object","keys","values","cartKeys","parseInt","Header","cartObj","Footer","auth","App","user","productName","productDataString","productObj","JSON","parse","writeCartData","orderBySelection","userSelection","target","value","orderBy","getFilteredProds","productsList","filter","products","inventory","pageLoading","writeUserData","bind","readCartData","userId","numOfUsers","errorObject","cartData","id","uuidv4","cartListKeys","productList","dbRef","signInAnonymously","then","currentUser","catch","error","errorCode","code","message","response","entries","users","newList","filteredProds","logout","login","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87954fbf.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Initialize Firebase\r\n// *** USE YOUR CONFIG OBJECT ***\r\nconst config = {\r\n\tapiKey: \"AIzaSyArVo9OLXwaGHvGmxGCMP-7nT6DiBBaX5k\",\r\n    authDomain: \"keeb-store.firebaseapp.com\",\r\n    databaseURL: \"https://keeb-store.firebaseio.com\",\r\n    projectId: \"keeb-store\",\r\n    storageBucket: \"keeb-store.appspot.com\",\r\n    messagingSenderId: \"560632301677\",\r\n    appId: \"1:560632301677:web:5f678f2f834f974e1d5764\"\t\r\n};\r\nfirebase.initializeApp(config);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;","import React, { Component } from 'react'\r\n\r\nclass Product extends Component {\r\n\r\n  render() {\r\n    const  name  = this.props.name;\r\n    const { price, type, url } = this.props.productInfo;\r\n\r\n    // if this product has an add to cart prop\r\n    // then give it an add to cart buttton\r\n    if (this.props.addToCart) {\r\n      return (\r\n        <div className=\"product\">\r\n          <h1>{ name }  ${ price } </h1>    \r\n          <img className=\"img\" src={url} alt={type} />\r\n          <button onClick={this.props.addToCart}> Add to cart</button>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div className=\"product\">\r\n          <h1>{ name }  ${ price } </h1>    \r\n          <img className=\"img\" src={url} alt={type} />\r\n          <button onClick={this.props.removeFromCart}> Remove from cart</button>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default Product;","import React, { Component } from 'react'\r\nimport firebase from './firebase';\r\nimport Product from './Product'\r\n\r\nclass Cart extends Component {\r\n\r\n  constructor(){\r\n      super();\r\n      this.state = {\r\n          cartSlideOut: false,\r\n      }\r\n  }\r\n\r\n  handleClick = (event) => {\r\n    event.preventDefault();\r\n    let slideOutDisplay = this.state.cartSlideOut;\r\n    this.setState({\r\n      cartSlideOut: !slideOutDisplay,\r\n    })\r\n  }\r\n\r\n  // TODO: we cant use the key to remove items from cart because the number of items\r\n  // inside of the cart list will change \r\n  removeFromCart = (key) => {\r\n    let cartPath = `users/${this.props.userInfo.uid}/cart`;\r\n    let userPath = `users/${this.props.userInfo.uid}`\r\n    let data;\r\n    let cart;\r\n\r\n    const cartRef = firebase.database().ref(cartPath);\r\n    const userRef = firebase.database().ref(userPath);\r\n\r\n    cartRef.child(key).remove();\r\n\r\n    console.log(\"key\", key)\r\n\r\n    cartRef.on('value', (snapshot) => {\r\n      data = snapshot.val();\r\n      // console.log(\"remove from cart read cart data\", data)\r\n      data.numOfProducts--\r\n      cart = data\r\n    });\r\n\r\n    userRef.set({\r\n      cart\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.cartSlideOut ){\r\n      //slide out cart display\r\n      let total = 0;\r\n      return (\r\n        <div className=\"slide-out-cart\">\r\n          <div className=\"slide-out-cart-container\">\r\n            <a href=\"#\" className=\"slide-out-cart__exit-btn\" onClick={this.handleClick}>x</a>\r\n            \r\n            {(this.props.cartList && this.props.cartList.length) && (\r\n              <p>You have {this.props.cartList.length - 1} item(s) in your cart!</p>\r\n            )}\r\n            \r\n            <hr /> \r\n            {this.props.cartList.map((product, i) => {\r\n              // console.log(\"cart list\", this.props.cartList)\r\n\r\n              // ignore product count in cart\r\n              if (isNaN(product)) {\r\n                console.log(`product #: ${i}: ${product}`)\r\n                // console.log(\"keys\",Object.keys(product))\r\n\r\n                let name = Object.keys(product);\r\n                let productInfo = Object.values(product)[0];\r\n\r\n                let key = this.props.cartKeys[i]\r\n\r\n                total = total + parseInt(productInfo.price);\r\n\r\n                return (\r\n                  <div>\r\n                    <Product removeFromCart={() => this.removeFromCart(key)} key={key} name={name} productInfo={productInfo} />\r\n                  </div>\r\n                )\r\n              }\r\n            })}\r\n            <div className=\"cart-info\">\r\n              <hr/>\r\n              <p>Your order total = ${total} </p>\r\n            </div>\r\n          </div> \r\n        </div>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <div className=\"nav-bar__cart-icon wrapper\">\r\n          <a href=\"\">\r\n              <i className=\"fas fa-shopping-cart cart-icon\" onClick={this.handleClick}></i> \r\n          </a>\r\n          {/* <p>{this.props.cartList.length}</p> */}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default Cart;","import React, { Component } from 'react';\r\nimport Cart from './Cart';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav>\r\n          <div className=\"nav-bar wrapper\">\r\n            <div className=\"logo\">\r\n              <img className=\"img\" src=\"http://matthopecodes.com/project-five-assets/keebStoreLogo.png\" alt=\"logo\"/>\r\n            </div>\r\n            <ul className=\"nav-bar__links\">\r\n              <h1>keeb-store</h1>\r\n            </ul>\r\n            <Cart cartList={this.props.cartList} cartKeys={this.props.cartKeys} cartObj={this.props.cartObj} userInfo={this.props.userInfo} />\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default  Header;","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <footer>\r\n        <p>matt was here</p>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom'\nimport firebase from './firebase';\nimport 'firebase/auth';\nimport './App.css';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport Header from './Header';\nimport Footer from './Footer';\nimport Product from './Product';\n\n// const provider = new firebase.auth.GoogleAuthProvider();\n\nconst auth = firebase.auth();\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      products: [],\n      cart: [],\n      cartObj: {},\n      inventory: [],\n      orderBy: 'all',\n      pageLoading: true,\n      user: null,\n    }\n\n    this.writeUserData = this.writeUserData.bind(this);\n    this.writeCartData = this.writeCartData.bind(this);\n    this.readCartData = this.readCartData.bind(this);\n  }\n\n  writeUserData(userId) {\n\n    const ref = firebase.database().ref('users/')\n    let numOfUsers \n\n    // TODO: get the current num of users, add new user according to user # \n    // increment the numOfUsers attribute in the users object\n    // TODO:\n\n    ref.on('value', (snapshot) => {\n      numOfUsers = snapshot.val().numOfUsers\n\n      // console.log(\"write user data snapshot.val(): \", snapshot.val())\n      \n      // TODO: if user does not exist in users\n      if(!(userId in snapshot.val())) {\n        // console.log(\"user does not exist in db\")\n        // console.log(\"num of users\", numOfUsers)\n\n        // increment current num of users\n        firebase.database().ref('users/').set({\n          numOfUsers\n        })\n\n        firebase.database().ref('users/' + userId).set({\n        // firebase.database().ref('users/').set({\n          uid : userId,\n        });\n      } else {\n        // console.log(\"num of users\", numOfUsers)\n        console.log(\"user does exist in db\")\n      }\n    }, (errorObject) => {\n      console.log(\"the read failed\", errorObject)\n    })\n  }\n\n  readCartData(userId) {\n    let cartPath = `users/${userId}/cart`;\n    let cartRef = firebase.database().ref(cartPath);\n    let data;\n\n    cartRef.on('value', (snapshot) => {\n      data = snapshot.val();\n      // console.log(\"read cart data\", data)\n    });\n\n    return data;\n  }\n\n  writeCartData(userId, product) {\n    // if there is, then copy that data and add new product\n    let cartData = this.readCartData(userId);\n    let cartPath = `users/${userId}/cart`;\n    let userPath = `users/${userId}`\n    let cart\n\n    let id = uuidv4()\n\n    if (cartData) {\n      // console.log(\"Write cart data\", cartData);\n      // console.log(\"product\", product)\n\n      let numItemsInCart = cartData.numOfProducts;\n      // cartData[numItemsInCart] = product\n      cartData[id] = product\n      cartData.numOfProducts++\n      cart = cartData\n\n      console.log(\"newCartData\", cartData)\n      firebase.database().ref(userPath).set({\n        cart\n      })\n    }\n    else {\n      cart = {\n        numOfProducts: 1 \n      }\n\n      cart[id] = product\n\n      firebase.database().ref(userPath).set({\n        cart\n      })\n\n      // firebase.database().ref(cartPath).set({\n      //   id: product,\n      //   // 0: product,\n      //   numOfProducts: 1 \n      // });\n\n    }\n  };\n\n  componentDidMount() { \n    // lists that will be populated with data from firebase\n    let productList = [];\n    let cartList = [];\n    let cartListKeys;\n    let cartObj = {};\n    let inventoryList = [];\n\n    // TODO: uncomment and test this \n    // check to see if the user was already logged in from prev session\n\n    // auth.onAuthStateChanged((user) => {\n    //   if (user) {\n    //     this.setState({ user });\n\n    //     // console.log(\"user from prev session\", user)\n\n    //     // let path = `users/${this.state.user.uid}`;\n    //     // const dbRef = firebase.database().ref(path);\n    //     // let itemToBeAdded = JSON.parse(`{ \"itemsInCart\" : 0 }`);\n    //     // dbRef.push(itemToBeAdded);\n    //   } \n    // });\n    \n    const dbRef = firebase.database().ref()\n    const userDbRef = firebase.database().ref('users/')\n\n    if (!(this.state.user)) {\n      auth.signInAnonymously()\n      .then(() => {\n        this.setState({user: auth.currentUser}, () => {\n          // TODO: do we want to write user data here or read?\n\n          // try {\n          //   userDbRef.set({\n          //     id: auth.currentUser.uid\n          //   })\n          // } catch(err) {\n          //   console.log(\"There was an error:\", err)\n          // }\n\n          this.writeUserData(this.state.user.uid);\n          let cartData = this.readCartData(this.state.user.uid)\n  \n          // console.log(\"user id\", this.state.user.uid)\n          // console.log(\"cart data\", cartData)\n        });\n      })\n      .catch((error) => {\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        console.log(errorCode);\n      });\n    }\n\n\n    // event listener that will fire every time there is a change in the firebase real time db\n    // We don't want to reset state every time there's a change in the db\n    // this will reset everyones state\n    // We likely just  want to listen for changes for that particular user\n\n    dbRef.on('value', (response) => {\n\n      console.log(\"there was a change in the database: \", response)\n\n      // for each product, entries will make an array with 2 elements\n      // 0(index) being the key and 1(index) being the value\n      productList =  Object.entries(response.val().products);\n      inventoryList = Object.entries(response.val().inventory);\n\n      // console.log(\"productList\", productList)\n      // console.log(\"inventoryList\", inventoryList)\n\n      // console.log(\"users\", response.val().users)\n\n      // TODO: update this to work with new cart structure\n\n      if (this.state.user && this.state.user.uid && response.val().users && response.val().users[this.state.user.uid]) {\n        cartList = response.val().users[this.state.user.uid].cart;\n        cartObj = cartList\n\n\n        if (cartList) {\n          let newList = Object.values(cartList)\n          let cartListValues = Object.values(cartList)\n          cartListKeys = Object.keys(cartList)\n\n          console.log(\"cart List\", cartList)\n\n          cartList = newList\n        } else {\n          cartList = [];\n        }\n\n      } else {\n        cartList = [];\n      }\n\n      this.setState({\n        products: productList,\n        cart: cartList,\n        cartKeys: cartListKeys,\n        cartObj: cartObj,\n        pageLoading: false\n      })\n      \n    });\n  }\n\n  addToCart = (product) => {\n    let cartPath;\n    let uid = this.state.user.uid;\n    let productName = product[0];\n    let productDataString = `{ \"price\": ${product[1].price}, \"type\": \"${product[1].type}\", \"url\": \"${product[1].url}\" }`;\n    let productObj = JSON.parse(`{ \"${productName}\" : ${productDataString} }` );\n\n    // console.log(\"add to cart was called, product:\", product);\n\n    if (uid) {\n      cartPath = `users/${this.state.user.uid}/cart`;\n      this.writeCartData(uid,productObj);\n    }\n    else {\n      console.log(\"there was a problem adding to the cart\");\n    }\n  }\n\n  orderBySelection = (event) => {\n    event.preventDefault();\n    let userSelection = event.target.value;\n\n    this.setState({\n      orderBy: userSelection,\n    })\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n  }\n\n  getFilteredProds = (productsList) => {\n    let filteredProds = productsList.filter((product) => {\n      let productInfo = product[1];\n      if (productInfo.type === this.state.orderBy || this.state.orderBy === 'all') {\n        return product;\n      }\n    })\n    return filteredProds;\n  }\n\n  render (){\n\n    if (this.state.pageLoading) {\n      return (\n        <div className=\"page-loader\">\n          <h1>loading...</h1>\n        </div>\n      )\n    }\n    else {\n\n      let productsList = [...this.state.products];\n      //filter the displayed products based on user input\n      let filteredProds = this.getFilteredProds(productsList);\n\n      return (\n        <div className=\"App\">\n          <Header cartList={this.state.cart} cartKeys={this.state.cartKeys} cartObj={this.state.cartObj} removeFromCart={this.removeFromCart} userInfo={this.state.user}/>\n          {this.state.user ? <button onClick={this.logout}>Log Out</button> : <button onClick={this.login}>Log In</button>}\n          <div className=\"header-background\">\n            <button><a href=\"#order-by\">Enter store</a></button>\n          </div>\n\n          <div id=\"order-by\" className=\"order-by\">\n            <h2>browse by: </h2>\n            <button className=\"order-by__btn\" onClick={(event) => {this.orderBySelection(event)}} value=\"keyboard\">keyboards</button>\n            <button className=\"order-by__btn\" onClick={(event) => {this.orderBySelection(event)}} value=\"case\">cases</button>\n            <button className=\"order-by__btn\" onClick={(event) => {this.orderBySelection(event)}} value=\"keycap\">keycaps</button>\n            <button className=\"order-by__btn\" onClick={(event) => {this.orderBySelection(event)}} value=\"all\">all</button>\n          </div>\n\n          <div id=\"products\" className=\"products-flex wrapper\">\n            {filteredProds.map((product) => {\n              return (\n                <Product \n                  addToCart={() => this.addToCart(product)} \n                  key={product[0]} \n                  name={product[0]} \n                  productInfo={product[1]}\n                />\n              )\n            })}\n          </div>\n\n          <Footer/>\n        </div>\n      )\n    }\n   \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}